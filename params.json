{"name":"Mongoose-study","tagline":"","body":"# mongoose-study\r\n使用mongoose可以让我们更好使用mongodb数据库，而不需要写繁琐的业务逻辑。\r\n##安装\r\n\r\n> npm install mongoose\r\n\r\n\r\n----------\r\n\r\n\r\n##初始化使用\r\n使用mongoose前，需安装node和mongodb，这里不讲node和mongodb的安装方法。\r\n```javascript\r\n    var mongoose = require(\"mongoose\");\r\n    var Schema = mongoose.Schema;\r\n    var db = mongoose.connection;\r\n    mongoose.connect('mongodb://localhost/animal');\r\n    db.on('error', console.error);\r\n    db.once('open', function() {\r\n       //这里建立模式和模型\r\n    }\r\n```\r\n\r\n----------\r\n\r\n\r\n##快速入门\r\n在mongoose中，所有的数据都是一种模式，每个模式都映射到mongodb的集合，并且定义该集合文件结构。\r\n```javascript\r\n    //这里建立一个动物的模式，所有动物都拥有这个模式下的所有属性\r\n    var animalSchema = new Schema({\r\n        name: String,\r\n        age: Number,\r\n    });\r\n```\r\n\r\n模型是我们从Schema中定义的一种多样化的构造函数，模型的实例可以使用很多操作，所有文档的创建和检索都是由模型来处理\r\n```javascript\r\n    var animalMode = db.model('Animal', animalSchema);\r\n```\r\n\r\n模型的实例实质是文件，而我们可以很轻松创建、修改这种文件\r\n```javascript\r\n    var cat = new animalMode({\r\n        name: 'catName',\r\n        age: '7',    //这里依然使用字符串，mongoose会自动转换类型\r\n      });\r\n    \r\n    cat.save(function(err, thor) {\r\n        if (err) return console.log(err);\r\n        console.log(thor);\r\n    });\r\n    //或者可以使用create\r\n    //cat.create(function(err, thor) {\r\n    //    if (err) return console.log(err);\r\n    //    console.log(thor);\r\n    //});\r\n    \r\n    //执行查找\r\n    animalMode.find(function(err, people){\r\n        if(err) console.log(err);\r\n        console.log(people);\r\n    });\r\n    //查找符合条件数据\r\n    animalMode.findOne({title: 'catName'}, function(err, cat){\r\n        if(err) console.log(err);\r\n        console.log(cat);\r\n    });\r\n```\r\n\r\n----------\r\n\r\n\r\n##Schema\r\n**数据类型**\r\n\r\n这是Schema中所有的数据类型，包括mongoose自定的数据类型\r\n\r\n - [String][1]\r\n - [Number][2]\r\n - [Date][3]\r\n - [Buffer][4]\r\n - Boolean\r\n - Mixed\r\n - [ObjectId][5]\r\n - Array\r\n\r\n每种数据类型的使用\r\n```javascript\r\n    var animalMode = mongoose.model('Animal', schema);\r\n    \r\n    var cat = new animalMode;\r\n    cat.name = 'Statue of Liberty'              //String\r\n    cat.age = '7';                              //Number\r\n    cat.updated = new Date;                     //Date\r\n    cat.binary = new Buffer(0);                 //Buffer\r\n    cat.living = false;                         //Boolean\r\n    cat.mixed = { any: { thing: 'i want' } };   //Mixed              \r\n    cat._someId = new mongoose.Types.ObjectId;  //ObjectId\r\n    cat.ofString.push(\"strings!\");              //Array\r\n```\r\n\r\n其中Mixed是mongoose自定义的一种混合类型，因为Mixed没有定义具体内容，可以用{}来使用，以下2种定义形式等价。\r\n```javascript\r\n    var animalSchema = new Schema({any: {}});\r\n    var animalSchema = new Schema({any: {Schema.Types.Mixed}});\r\n```\r\n\r\n----------\r\n**自定义方法**\r\n\r\n可以为Schema绑定方法\r\n```javascript\r\n    var animalSchema = new Schema({\r\n        name: String,\r\n        age: Number,\r\n    });\r\n    \r\n    animalSchema.methods.findSimilarTypes = function (cb) {\r\n        return this.model('Animal').find({ name: this.name }, cb);\r\n    }\r\n    \r\n    var animalMode = db.model('Animal', animalSchema);\r\n    \r\n    cat.findSimilarTypes(function(err, cat){\r\n        if(err) console.log(err);\r\n        console.log(cat);\r\n    });\r\n```\r\n \r\n也可以为Schema添加静态方法\r\n```javascript\r\n    animalSchema.statics.findByName = function (name, cb) {\r\n        return this.find({ name: new RegExp(name, 'i') }, cb);\r\n    }\r\n    var animalMode = db.model('Animal', animalSchema);\r\n    \r\n    animalMode.findByName('catName', function (err, animals) {\r\n        console.log(animals);\r\n    });\r\n``` \r\n\r\n\r\n----------\r\n**索引**\r\n\r\n我们可以为mongodb数据建立索引，mongodb支持二级索引，为了提高数据查找和定位，建立复合索引是必要的\r\n```javascript\r\n    var animalSchema = new Schema({\r\n      name: String,\r\n      age: Number,\r\n      tags: { age: [String], index: true } // field level\r\n    });\r\n    \r\n    animalSchema.index({ name: 1, age: -1 }); // schema level\r\n```\r\n但是这种索引的建立可能导致显著的性能影响，建议在生产下停止，将设置模式下的自动索引设置为false禁止\r\n```javascript\r\n    animalSchema.set('autoIndex', false);\r\n    // or\r\n    new Schema({..}, { autoIndex: false });\r\n```\r\n----------\r\n\r\n##Model\r\n###C\r\n```javascript\r\n    cat.save(function(err, thor) {\r\n        if (err) return console.log(err);\r\n        console.log(thor);\r\n    });\r\n    //或者可以使用create\r\n    cat.create(function(err, thor) {\r\n        if (err) return console.log(err);\r\n        console.log(thor);\r\n    });\r\n```\r\n###R\r\n\r\n```javascript\r\n//find\r\nanimalMode.find(function(err, cat){\r\n    if (err) console.log(err);\r\n    console.log(cat);\r\n})\r\n      \r\n//findOne\r\nanimalMode.findOne({name: 'catName'}, function(err, cat){\r\n    if (err) console.log(err);\r\n    console.log(cat);\r\n})\r\n\r\n//findByID\r\n//与 findOne 相同，但它接收文档的 _id 作为参数，返回单个文档。_id //可以是字符串或 ObjectId 对象。\r\nanimalMode.findById(id, function(err, adventure){\r\n    if (err) consoel.log(err);\r\n    console.log(adventure);\r\n});\r\n\r\n//where\r\n//查询数据类型是字符串时，可支持正则\r\nanimalMode.where('age', '2').exec(function(err, cat){\r\n    if (err) console.log(err);\r\n    console.log(cat);\r\n});\r\n\r\nanimalMode\r\n    .where('age').gte(1).lte(10)\r\n    .where('name', 'catName')\r\n    .exec(function(err, cat){\r\n      if (err) console.log(err);\r\n      console.log(cat);\r\n    });\r\n\r\n```\r\n\r\n###U\r\n官方文档提供的更新函数[Model.update][6]\r\n\r\n    Model.update(conditions, doc, [options], [callback])\r\n\r\n - conditions   更新条件\r\n - doc  更新内容\r\n - option   更新选项\r\n\r\n    - safe (boolean) 安全模式，默认选项，值为true\r\n    - upsert (boolean) 条件不匹配时是否创建新文档，默认值为false\r\n    - multi (boolean) 是否更新多个文件，默认值为false\r\n    - strict (boolean) 严格模式，只更新一条数据\r\n    - overwrite (boolean) 覆盖数据，默认为false\r\n\r\n - callback\r\n    - err 更新数据出错时返回值\r\n    - numberAffected （笔者暂时不清楚）\r\n    - rawResponse 受影响的行数\r\n\r\n   ```javascript\r\n   animalMode.update({name: 'catName'}, {age: '6'}, {multi : true}, function(err, numberAffected, raw){\r\n    if (err) return console.log(err);\r\n    console.log('The number of updated documents was %d', numberAffected);\r\n    console.log('The raw response from Mongo was ', raw);\r\n  });\r\n   ```\r\n\r\n###D\r\n```javascript\r\nanimalMode.remove({age: 6}, function(err){\r\n    if (err) console.log(err);\r\n})\r\n```\r\n\r\n###其它\r\n```javascript\r\n//返回文档数\r\nanimalMode.count({age: 2}, function(err, cat){\r\n    if (err) console.log(err);\r\n    console.log(cat);\r\n})\r\n```\r\n\r\n\r\n----------\r\n\r\n\r\n##资源推荐\r\n[mongoosejs.com][7]\r\n\r\n\r\n\r\n    \r\n\r\n> 持续更新中...\r\n\r\n    由于笔者也是初学者，有地方讲的不对，\r\n    欢迎给我邮件（417022902@qq.com）谢谢^-^\r\n\r\n\r\n  [1]: http://mongoosejs.com/docs/api.html#schema-string-js\r\n  [2]: http://mongoosejs.com/docs/api.html#schema-number-js\r\n  [3]: http://mongoosejs.com/docs/api.html#schema-date-js\r\n  [4]: http://mongoosejs.com/docs/api.html#schema-buffer-js\r\n  [5]: http://mongoosejs.com/docs/api.html#schema-objectid-js\r\n  [6]: http://mongoosejs.com/docs/api.html#model_Model.update\r\n  [7]: http://mongoosejs.com/docs/guide.html","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}